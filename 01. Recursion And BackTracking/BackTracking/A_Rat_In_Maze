
public class Solution {
	public static boolean ratInAMazeUtil(int[][] maze, int[][] track,int row,int col){
       if(row== maze.length-1 && col==maze[0].length-1){
		   return true;
	   }
	   // Go Upward
	   if(row-1>=0){
		   if(maze[row-1][col]!=0 && track[row-1][col]!=1){
			   track[row-1][col]=1; // Mark AS Tracking , Visited
               if(ratInAMazeUtil(maze,track,row-1,col)){
                   return true;
			   }
			   else{
				   	track[row - 1][col] = 0; // Mark AS UnTracking , UnVisited
			   }

		   }
	   }

	   	// Go Right
		if (col+ 1 < maze[0].length) {
			if (maze[row ][col+1] != 0 && track[row][col+1] != 1) {
				track[row][col+1] = 1; // Mark AS Tracking , Visited
				if (ratInAMazeUtil(maze, track, row, col+1)) {
					return true;
				} else {
					track[row ][col+1] = 0; // Mark AS UnTracking , UnVisited
				}

			}
		}

		// Go Downward
		if (row + 1 < maze.length) {
			if (maze[row + 1][col] != 0 && track[row +1][col] != 1) {
				track[row + 1][col] = 1; // Mark AS Tracking , Visited
				if (ratInAMazeUtil(maze, track, row + 1, col)) {
					return true;
				} else {
					track[row + 1][col] = 0; // Mark AS UnTracking , UnVisited
				}

			}
		}
       
	   // Go Left
	   	if (col - 1 >=0) {
			if (maze[row][col - 1] != 0 && track[row][col - 1] != 1) {
				track[row][col - 1] = 1; // Mark AS Tracking , Visited
				if (ratInAMazeUtil(maze, track, row, col - 1)) {
					return true;
				} else {
					track[row][col - 1] = 0; // Mark AS UnTracking , UnVisited
				}

			}
		}
	return false;

	}

	public static boolean ratInAMaze(int maze[][]){
        int track[][] =new int[maze.length][maze[0].length];
		int currentRow=0;
		int currentColumn =0;
		return ratInAMazeUtil(maze,track,currentRow,currentColumn);
	}
}
