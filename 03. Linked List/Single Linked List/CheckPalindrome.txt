public static LinkedListNode<Integer> reverseList(LinkedListNode<Integer> temp){  
       LinkedListNode<Integer> current = temp;  
        LinkedListNode<Integer> prevNode = null, nextNode = null;  
          
       //Swap the previous and next nodes of each node to reverse the direction of the list  
        while(current != null){  
            nextNode = current.next;  
            current.next = prevNode;  
            prevNode = current;  
            current = nextNode;  
        }  
        return prevNode;  
    }  

	public static boolean isPalindrome(LinkedListNode<Integer> head) {

		if(head==null){
                   return true;
		}

		if(head.next==null){
			return true;
		}
	LinkedListNode<Integer> current = head;  
	LinkedListNode<Integer> len=head;
        boolean flag = true;  

		// Length Of Linked List
		int size=0;
		while(len!=null){
			size++;
			len=len.next;
		}
          
        //Store the mid position of the list  
        int mid = (size%2 == 0)? (size/2) : ((size+1)/2);  
          
        //Finds the middle node in given singly linked list  
        for(int i=1; i<mid; i++){  
            current = current.next;  
        }  
          
        //Reverse the list after middle node to end  
        LinkedListNode<Integer> revHead = reverseList(current.next);  
   
        //Compare nodes of head1 half and head2 half of list  
        while(head != null && revHead != null){  
            if(head.data != revHead.data){  
                flag = false;  
                break;  
            }  
            head = head.next;  
            revHead = revHead.next;  
        }  
   
        if(flag)  
             return true;
        else  
          return false;
	
	}