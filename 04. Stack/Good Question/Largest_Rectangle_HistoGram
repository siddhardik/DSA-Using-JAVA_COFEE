import java.util.Stack;
import static java.lang.Math.max;
class Solution {
    public int[] lb(int[] arr,int n){
        int[] ans=new int[n];
        Stack<Integer> st=new Stack<>();

        for(int i=0;i<n;i++){
            while(st.size()>0 && arr[st.peek()]>=arr[i]){
                st.pop();
            }

            if(st.size()==0){
                ans[i]=-1;
            }

            else{
                ans[i]=st.peek();
            }
            st.push(i);
        }
        return ans;


    }


    public int[] rb(int[] arr,int n){
        int[] ans=new int[n];
        Stack<Integer> st=new Stack<>();

        for(int i=n-1;i>=0;i--){
            while(st.size()>0 && arr[st.peek()]>=arr[i]){
                st.pop();
            }

            if(st.size()==0){
                ans[i]=n;
            }

            else{
                ans[i]=st.peek();
            }
            st.push(i);
        }
      
      return ans;

    }

    public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        int leftSmaller[] =lb(heights,n);
        int rightSmaller[] =rb(heights,n);

        int maxArea=0;

        for(int i=0;i<n;i++){
            maxArea = max(maxArea,heights[i] *(rightSmaller[i]-leftSmaller[i]-1) );
        }

        return maxArea;

    }
}