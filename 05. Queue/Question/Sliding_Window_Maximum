import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;
class Solution {
    public static int[] nextGreaterRightIndex(int[] arr, int n){
        Stack<Integer> st= new Stack<>();
        int ans[] =new int[n];
        for(int i=n-1;i>=0;i--){
        while(st.size()>0 && arr[i]>=arr[st.peek()]){
            st.pop();
            // small And equal wala will be popped out 
        } 
        if(st.size()==0){
            ans[i] = n;
        }
        else{
            ans[i] =st.peek();       
        }
        st.push(i);

        }
        return ans; 

    }
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n=nums.length;
        int[] ans= new int[n-k+1];
        // ngr === next Greater Right 
        int[] nge= nextGreaterRightIndex(nums,n);
        // n=4  k=3  012 123  i should be go till n-k
        int j=0;
        for(int i=0;i<n-k+1 ;i++){
            if(j<i){
                j=i;
            }
            while(nge[j]<i+k){
                j=nge[j];
            }
            ans[i]=nums[j];

        }

        
    return ans;

    }
}