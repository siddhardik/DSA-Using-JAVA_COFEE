import java.util.Queue;
import java.util.LinkedList;

public class Solution {

	public static void printLevelWise(BinaryTreeNode<Integer> root) {
		//Your code goes here
		Queue<BinaryTreeNode<Integer>> childRec= new LinkedList<BinaryTreeNode<Integer>>();
		
		childRec.add(root);

		while(!childRec.isEmpty()){
			BinaryTreeNode<Integer> temp= childRec.poll();
			int left =-1;
			if(temp.left!=null){
				left=temp.left.data;
				childRec.add(temp.left);
				
			}
			int right =-1;
			if(temp.right!=null){
				right=temp.right.data;
			childRec.add(temp.right);
			}
			
			System.out.println(temp.data +":L:"+left+",R:"+right);
			

		}

	}
	
}

/*
To print the information of a node with data D, you need to follow the exact format :

           D:L:X,R:Y

Where D is the data of a node present in the binary tree. 
X and Y are the values of the left(L) and right(R) child of the node.
Print -1 if the child doesn't exist.

1:L:2,R:3
2:L:4,R:-1
3:L:5,R:6
4:L:-1,R:7
5:L:-1,R:-1    
6:L:-1,R:-1
7:L:-1,R:-1

*/