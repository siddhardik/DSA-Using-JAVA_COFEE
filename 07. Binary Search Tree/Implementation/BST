public class BinarySearchTree {
	BinaryTreeNode<Integer> root;

	public BinarySearchTree() {
		root = null;
	}
	public void insert(int data) {
		root = insertHelp(root, data);
	}

	public BinaryTreeNode<Integer> insertHelp(BinaryTreeNode<Integer> root, int data) {
		if (root == null) {
			BinaryTreeNode<Integer> newNode = new BinaryTreeNode<Integer>(data);
			return newNode;
		}
		if (data <= root.data) {
			root.left = insertHelp(root.left, data);
		} else {
			root.right = insertHelp(root.right, data);
		}
		return root;
	}
	
	public void remove(int data) {
		root = delete(root, data);
	}

	public BinaryTreeNode<Integer> delete(BinaryTreeNode<Integer> root, int data) {

		if (root == null) {
			return null;
		}
		if (root.data == data) {

			if (root.left == null && root.right == null) {
				return null;
			} else if (root.left == null) {

				return root.right;

			} else if (root.right == null) {
				return root.left;
			} else {

				// inorder succeesor i.e. Right Subtree Min

				BinaryTreeNode<Integer> temp = root.right;
				while (temp.left != null) {
					temp = temp.left;
				}
				int tempData = temp.data;
				root.data = tempData;
				root.right = delete(root.right, tempData);
				return root;
			}

		}

		if (data < root.data) {

			root.left = delete(root.left, data);

		} else {
			root.right = delete(root.right, data);
		}
		return root;

	}
	
	public void printTree() {
		printTreeHelp(root);
	}

	public void printTreeHelp(BinaryTreeNode<Integer> root) {

		if (root == null) {
			return;
		}
		// N:L:x,R:y
		System.out.print(root.data + ":");
		if (root.left != null) {
			System.out.print("L:" + root.left.data + ",");
		}
		if (root.right != null) {
			System.out.print("R:" + root.right.data);
		}
		System.out.println();
		printTreeHelp(root.left);
		printTreeHelp(root.right);

	}
	
	public boolean search(int data) {
		return searchHelp(root, data);
	}

	public boolean searchHelp(BinaryTreeNode<Integer> root, int data) {
		if (root == null)
			return false;
		if (root.data == data) {
			return true;
		}
		if (data < root.data) {
			return searchHelp(root.left, data);
		}
		return searchHelp(root.right, data);

	}
	

}
