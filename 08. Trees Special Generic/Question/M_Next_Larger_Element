// 1st Approach 
public class Solution {

	/*	TreeNode structure 
	 * 
	 * class TreeNode<T> {
			T data;
			ArrayList<TreeNode<T>> children;
	
			TreeNode(T data){
				this.data = data;
				children = new ArrayList<TreeNode<T>>();
			}
		}*/
		public static TreeNode<Integer> search(TreeNode<Integer> root, int num){
			if(root==null || root.children==null){
					return null;
			}
			if(root.data ==num){
				return root;
			}
	
			for(int i=0;i<root.children.size();i++){
				TreeNode<Integer> ans= search(root.children.get(i),num);
				if(ans!=null){
					return ans;
				}
			}
		return null;	
		}
		static int ceil;
	
		public static void updateCeil(TreeNode<Integer> root, int n){
			if(root==null || root.children==null){
				return ;
			}
			if(root.data<ceil && root.data>n){
				ceil=root.data;
			}
					   
		 for(TreeNode<Integer> childEle: root.children){
						   updateCeil(childEle, n);
					   }
		}
		
		public static TreeNode<Integer> findNextLargerNode(TreeNode<Integer> root, int n){
			
			ceil =Integer.MAX_VALUE;   // Smallest Among Largers
			updateCeil(root,n);
			if(ceil==Integer.MAX_VALUE){
				  return null;              // Not Ceil Found  in tree
			}
			else{
				return search(root,ceil);
			}
	
			
		}
		
	} 



	
 
 //  2nd Approach 
class Data_node{
	int num;
	TreeNode<Integer> nln;     //next Larger Node
	}
	
	
	public class Solution {
	
	/*	TreeNode structure 
	 * 
	 * class TreeNode<T> {
			T data;
			ArrayList<TreeNode<T>> children;
	
			TreeNode(T data){
				this.data = data;
				children = new ArrayList<TreeNode<T>>();
			}
		}*/
	
		public static Data_node findNextLargerNodeHelper(TreeNode<Integer> root,int n,int nextLarge){
		   
		   Data_node obj =new Data_node();
		   obj.num=Integer.MAX_VALUE;
		   if(root.data>n && root.data<nextLarge){
			   obj.num=root.data;
			   nextLarge=root.data;
			   obj.nln=root;
	
		   }
		  
		  //Base Case 
		   if(root.children ==null){
			   return obj;
		   }
	
		   for(int i=0;i<root.children.size();i++){
			  Data_node childReply= findNextLargerNodeHelper(root.children.get(i),n,nextLarge);
				  if(childReply.num<nextLarge && childReply.num>n){
						  nextLarge=childReply.num;
						  obj.nln=childReply.nln;
				  }
		   }
	
		   return obj;
		   
		}
		
		
		public static TreeNode<Integer> findNextLargerNode(TreeNode<Integer> root, int n){
			if(root ==null){
				return null;
			}
			int nl=Integer.MAX_VALUE; // nl = next Large
			return findNextLargerNodeHelper(root,n,nl).nln;
			}
		
	}






































