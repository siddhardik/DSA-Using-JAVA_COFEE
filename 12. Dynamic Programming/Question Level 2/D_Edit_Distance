	import java.util.Arrays;
	public class Solution {

	    static int editDistanceUtil(String word1, String word2, int i, int j, int[][] dp) {

	        if (i < 0)
	            return j + 1;
	        if (j < 0)
	            return i + 1;

	        if (dp[i][j] != -1) return dp[i][j];

	        if (word1.charAt(i) == word2.charAt(j))
	            return dp[i][j] = 0 + editDistanceUtil(word1, word2, i - 1, j - 1, dp);

	        // Minimum of three choices
	        else return dp[i][j] = 1 + Math.min(editDistanceUtil(word1, word2, i - 1, j - 1, dp),
	            Math.min(editDistanceUtil(word1, word2, i - 1, j, dp), editDistanceUtil(word1, word2, i, j - 1, dp)));

	    }

	    public static int editDistance(String s, String t) {
	        //Your code goes here
	        int n = s.length();
	        int m = t.length();

	        int[][] dp = new int[n][m];
	        for (int row[]: dp)
	            Arrays.fill(row, -1);
	        return editDistanceUtil(s, t, n - 1, m - 1, dp);
	    }

	}