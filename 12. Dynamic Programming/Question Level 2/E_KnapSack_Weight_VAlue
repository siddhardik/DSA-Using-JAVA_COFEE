
// Via Recursion
public static int knapsack(int W, int val[], int wt[], int i) {

    if(i==val. length) {
    return 0;
    }
    
    int ans;
    if(wt[i] <= W) {
    // including ith item
    int ans1 = val[i] + knapsack (W-wt[i],val, wt, i+1);
    //excluding ith item 
    int ans2 = knapsack (W,val, wt, i+1);
    ans = Math.max(ans1, ans2);
    }else {
    ans = knapsack(W, val,wt,i+1);
    }
    
    return ans;
    
    }



    public class Solution {

        public static int knapsackIterative(int[] weights, int[] values, int n, int maxWeights) {
            //Yoint n = values.length;
            int[][] dp = new int[n + 1][maxWeights + 1];
    
            for (int i = n - 1; i >= 0; i--) {
                for (int w = 0; w <= maxWeights; w++) {
    
                    int ans;
                    if (weights[i] <= w) {
                        int ans1 = values[i] + dp[i + 1][w - weights[i]];
                        int ans2 = dp[i + 1][w];
                        ans = Math.max(ans1, ans2);
                    } else {
                        ans = dp[i + 1][w];
                    }
                    dp[i][w] = ans;
                }
            }
    
            return dp[0][maxWeights];
    
        }
    
    }